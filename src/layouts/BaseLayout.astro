---
import SEO from "../components/SEO.astro";
import "../styles/global.css";
const { title, description, url, image } = Astro.props;
---

<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link rel="icon" type="image/svg+xml" href="/isotipo.png" />
    <link
      href="https://fonts.googleapis.com/css2?family=Inder&family=Righteous&display=swap"
      rel="stylesheet"
    />

    <SEO {title} {description} {url} {image} />
  </head>
  <body class="min-h-screen relative text-white antialiased">
    <div class="starfield"></div>
    <main class="relative z-10 w-full md:max-w-7xl mx-auto px-4 sm:px-6">
      <slot />
    </main>

    <script>
      // Importar Lenis y GSAP
      import Lenis from "lenis";
      import { gsap } from "gsap";

      // Declaraciones de tipos para este script
      declare global {
        interface Window {
          WebGLManager: WebGLManagerInterface;
          lenis: any;
          gsap: any;
        }
      }

      // Interface local para TypeScript
      interface WebGLManagerInterface {
        isInitialized: boolean;
        components: Map<string, () => Promise<void> | void>;
        eventBus: EventTarget;
        registerComponent(
          name: string,
          initFunction: () => Promise<void> | void
        ): void;
        initComponent(name: string): Promise<void>;
        initAll(): Promise<void>;
        on(event: string, callback: (e: Event) => void): void;
        emit(event: string, data?: any): void;
      }

      class WebGLManager implements WebGLManagerInterface {
        public isInitialized: boolean = false;
        public components: Map<string, () => Promise<void> | void> = new Map();
        public eventBus: EventTarget = new EventTarget();

        constructor() {
          this.isInitialized = false;
          this.components = new Map();
          this.eventBus = new EventTarget();
        }

        // Registrar componente WebGL
        registerComponent(
          name: string,
          initFunction: () => Promise<void> | void
        ): void {
          this.components.set(name, initFunction);
          console.log(`‚úÖ WebGL Component registered: ${name}`);

          // Si ya estamos inicializados, ejecutar inmediatamente
          if (this.isInitialized) {
            this.initComponent(name);
          }
        }

        // Inicializar un componente espec√≠fico
        async initComponent(name: string): Promise<void> {
          const initFn = this.components.get(name);
          if (initFn) {
            try {
              await initFn();
              console.log(`üöÄ Component initialized: ${name}`);

              // Emitir evento para otros componentes
              this.eventBus.dispatchEvent(new CustomEvent(`${name}:ready`));
            } catch (error) {
              console.error(`‚ùå Error initializing ${name}:`, error);
            }
          }
        }

        // Inicializar todos los componentes
        async initAll(): Promise<void> {
          if (this.isInitialized) return;

          console.log("üîÑ WebGL Manager: Initializing all components...");
          this.isInitialized = true;

          // Inicializar en orden espec√≠fico
          const initOrder: string[] = ["webgl", "cards", "particles"];

          for (const componentName of initOrder) {
            if (this.components.has(componentName)) {
              await this.initComponent(componentName);
              // Peque√±o delay entre componentes
              await new Promise<void>((resolve) => setTimeout(resolve, 100));
            }
          }

          console.log("‚úÖ All WebGL components initialized");
        }

        // Event bus para comunicaci√≥n entre componentes
        on(event: string, callback: (e: Event) => void): void {
          this.eventBus.addEventListener(event, callback);
        }

        emit(event: string, data?: any): void {
          this.eventBus.dispatchEvent(new CustomEvent(event, { detail: data }));
        }
      }

      // Instancia global
      window.WebGLManager = new WebGLManager();

      // Inicializar cuando TODO est√© listo
      if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", () => {
          setTimeout(() => window.WebGLManager.initAll(), 500);
        });
      } else {
        setTimeout(() => window.WebGLManager.initAll(), 500);
      }

      // === INICIALIZACI√ìN DE LENIS + GSAP ===
      console.log("üöÄ Iniciando Lenis + GSAP...");

      // Configurar Lenis con par√°metros m√°s suaves
      window.lenis = new Lenis({
        duration: 1.2, // M√°s lento y suave (era 1.2)
        easing: (t) => 1 - Math.pow(1 - t, 3), // Cubic out m√°s suave
        touchMultiplier: 1.8, // Menos sensible al touch (era 2)
        wheelMultiplier: 0.9, // Menos sensible al wheel
        infinite: false,
        smoothWheel: true, // Suavizar wheel
      });

      // Agregar debug para verificar que funciona
      window.lenis.on("scroll", (e: any) => {
        if (Math.round(e.progress * 100) % 20 === 0) {
          console.log(`üéØ Lenis scroll: ${Math.round(e.progress * 100)}%`);
        }
      });

      // Loop principal de animaci√≥n (reemplaza GSAP ticker)
      function raf(time: number) {
        window.lenis.raf(time);
        requestAnimationFrame(raf);
      }
      requestAnimationFrame(raf);

      // Hacer GSAP disponible globalmente
      window.gsap = gsap;

      console.log("‚úÖ Lenis + GSAP configurados");
      console.log("ÔøΩ WebGL Manager + Lenis + GSAP loaded");
    </script>
  </body>
</html>
