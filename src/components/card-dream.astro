<!-- Contenedor de las 3 tarjetas -->
<div
  class="z-20 flex flex-row flex-nowrap items-end justify-center md:mx-24 mt-16 overflow-hidden pointer-events-none"
>
  <div class="flex justify-between items-center w-full max-w-7xl px-4 sm:px-12">
    <!-- Tarjeta Izquierda -->
    <div
      id="dream-card-left"
      class="dream-card rounded-xl w-[38%] border border-white/12 bg-white/[0.03] backdrop-blur-md p-3 shadow-[0_8px_40px_rgba(0,0,0,.35)] opacity-100 pointer-events-auto"
    >
      <h5 class="font-righteous text-[18px] text-grisclarotwo">
        ¿Qué soñaste?
      </h5>
      <div
        class="rounded-xl border border-white/12 bg-gray-700/[0.53] mt-3 backdrop-blur-md p-2 min-h-32 h-32 shadow-[0_8px_40px_rgba(0,0,0,.25)]"
      >
        <p
          class="typing-text font-inder text-[14px] text-grisclarotwo typing-container"
          data-text="Describe tu sueño con tus propias palabras. Cada detalle, emoción y sensación importa para crear tu análisis personalizado."
        >
          <span class="typed-content"></span>
          <span class="typing-cursor">|</span>
        </p>
      </div>
      <div class="mt-4 grid place-items-center">
        <div class="relative">
          <div
            class="absolute -inset-10 blur-2xl opacity-60"
            style="background: radial-gradient(120px 120px at 50% 50%, rgba(216,70,239,.35), rgba(0,0,0,0));"
          >
          </div>
        </div>
      </div>
    </div>
    <div
      class="rounded-full aspect-square grid place-content-center h-[80%] p-2 bg-black/70 opacity-100 pointer-events-auto"
    >
      <!-- From Uiverse.io by risabbir -->
      <div class="warp-loader">
        <div class="ring"></div>
        <div class="ring"></div>
        <div class="ring"></div>
        <div class="ring"></div>
        <div class="core-glow"></div>
      </div>
    </div>

    <!-- Tarjeta Derecha -->
    <div
      id="dream-card-right"
      class="dream-card rounded-xl md:w-[38%] border border-white/12 bg-white/[0.03] backdrop-blur-md p-3 shadow-[0_8px_40px_rgba(0,0,0,.35)] opacity-100 pointer-events-auto"
    >
      <h5 class="font-righteous text-[18px] text-grisclarotwo">
        Interpretación
      </h5>
      <div
        class="rounded-xl border border-white/12 bg-gray-700/[0.53] mt-3 backdrop-blur-md p-2 pb-12 min-h-32 shadow-[0_8px_40px_rgba(0,0,0,.25)]"
      >
        <p
          class="typing-text font-inder text-[14px] text-grisclarotwo typing-container"
          data-text="Descubre conexiones profundas entre tus sueños y tu realidad consciente e inconsciente."
        >
          <span class="typed-content"></span>
          <span class="typing-cursor">|</span>
        </p>
      </div>
      <div class="mt-4 grid place-items-center">
        <div class="relative">
          <div
            class="absolute -inset-10 blur-2xl opacity-60"
            style="background: radial-gradient(120px 120px at 50% 50%, rgba(239,216,70,.35), rgba(0,0,0,0));"
          >
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .typing-cursor {
    animation: blink 1s infinite;
    font-weight: bold;
  }

  @keyframes blink {
    0%,
    50% {
      opacity: 1;
    }
    61%,
    100% {
      opacity: 0;
    }
  }

  .typing-container {
    min-height: 100%;
    height: 100%;
    overflow: hidden;
  }

  .dream-card {
    will-change: transform, opacity;
    min-height: 240px;
    display: flex;
    flex-direction: column;
    /* GSAP maneja las transformaciones */
  }

  .dream-card:hover {
    filter: brightness(1.1);
  }

  @media (max-width: 768px) {
    .dream-card {
      width: 90% !important;
      margin: 0 auto 1rem auto;
    }

    .flex {
      flex-direction: column;
      align-items: center;
    }
  }

  /* main loader */
  /* From Uiverse.io by risabbir */
  .warp-loader {
    position: relative;
    width: 160px;
    height: 160px;
  }

  .ring {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    transform: translate(-50%, -50%);
    background: radial-gradient(
      circle,
      rgba(193, 49, 232, 0.15) 30%,
      transparent 70%
    );
    animation: pulse 2.2s ease-out infinite;
    opacity: 0;
    box-shadow:
      0 0 12px #a02ced66,
      0 0 24px #630b8933;
    border: 2px solid rgba(125, 35, 169, 0.536);
  }

  .ring:nth-child(1) {
    animation-delay: 0s;
  }
  .ring:nth-child(2) {
    animation-delay: 0.4s;
  }
  .ring:nth-child(3) {
    animation-delay: 0.8s;
  }
  .ring:nth-child(4) {
    animation-delay: 1.2s;
  }

  @keyframes pulse {
    0% {
      transform: translate(-50%, -50%) scale(0.3);
      opacity: 1;
    }
    70% {
      transform: translate(-50%, -50%) scale(1.1);
      opacity: 0.15;
    }
    100% {
      transform: translate(-50%, -50%) scale(1.4);
      opacity: 0;
    }
  }

  .core-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 24px; /* Reduced size for the core glow */
    height: 24px;
    transform: translate(-50%, -50%);
    border-radius: 50%;
    background: radial-gradient(circle at center, #ab3aec, #850aa6);
    box-shadow:
      0 0 25px #af20c5,
      0 0 60px #7d0fa288,
      0 0 100px #43026833;
    animation: corePulse 1.6s ease-in-out infinite;
  }

  @keyframes corePulse {
    0%,
    100% {
      transform: translate(-50%, -50%) scale(1);
    }
    50% {
      transform: translate(-50%, -50%) scale(1.2);
    }
  }
</style>

<script>
  // Componente de cards usando WebGL Manager

  function initCardsComponent() {
    console.log("🃏 Initializing Cards component...");

    // Configurar efectos de typing para todas las tarjetas
    const typingElements = document.querySelectorAll(".typing-text");
    const typingAnimations = new Map();

    typingElements.forEach((typingElement, index) => {
      const textToType = typingElement.getAttribute("data-text") || "";
      const typedTextElement = typingElement.querySelector(".typed-content");

      if (!typedTextElement) return;

      let charIndex = 0;
      let isTyping = false;
      const typingSpeed = 50;
      const pauseBetweenLoops = 4000;

      function typeText() {
        if (!isTyping) return; // Permitir pausar/detener

        if (charIndex < textToType.length && typedTextElement) {
          typedTextElement.textContent += textToType.charAt(charIndex);
          charIndex++;
          setTimeout(typeText, typingSpeed);
        } else {
          setTimeout(() => {
            if (typedTextElement && isTyping) {
              typedTextElement.textContent = "";
              charIndex = 0;
              typeText();
            }
          }, pauseBetweenLoops);
        }
      }

      // Funciones de control para GSAP
      const startTyping = () => {
        if (!isTyping) {
          isTyping = true;
          typeText();
        }
      };

      const stopTyping = () => {
        isTyping = false;
      };

      // Almacenar referencia para control desde GSAP
      typingAnimations.set(typingElement, {
        start: startTyping,
        stop: stopTyping,
      });

      // Iniciar typing automáticamente después de un pequeño delay
      setTimeout(
        () => {
          startTyping();
        },
        1000 + index * 500
      ); // Delay escalonado para cada tarjeta
    });

    console.log(
      "✅ Cards component initialized successfully - all visible and typing"
    );
  } // Cierre de initCardsComponent

  // Inicializar el componente cuando el DOM esté listo
  if (typeof window !== "undefined") {
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", initCardsComponent);
    } else {
      initCardsComponent();
    }
  }
</script>
